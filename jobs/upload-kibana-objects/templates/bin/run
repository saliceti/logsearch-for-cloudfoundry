#!/var/vcap/packages/ruby-2.3/bin/ruby

`set -x`


require 'logger'

$logger = Logger.new("/var/vcap/sys/log/upload-kibana-objects.stdout.log")

def log_status(message, is_error = false)
  if is_error
    $logger.error(message)
  else
    $logger.info(message)
  end
  puts message
end

#############################################
# Generate default Kibana objects to upload #
#############################################
log_status("------------------------------------------------------------")
log_status("Upload Kibana objects from job defaults. Start processing...")
log_status("------------------------------------------------------------")

require 'json'

def render_upsert_queries(type, pattern)
  combined = ""
  Dir.glob(pattern).each do |data_file|
    file_content = File.read(data_file).strip
    if file_content.empty?
      # skip empty file
      $logger.warn("SKIP file (empty content) '#{data_file}'")
      next
    end
    begin
      parsed_json = JSON.parse(file_content)
      if 'index-pattern' == type
        # index-pattern usually contains '*' which is special character and can't be used in file name
        # so we set its 'id' from 'title' field instead
        id = parsed_json["title"]
      else
        id = File.basename(data_file, ".json")
      end
      combined += "{\"delete\":{\"_index\":\".kibana\",\"_type\":\"#{type}\",\"_id\":\"#{id}\"}}\n"
      combined += "{\"index\":{\"_index\":\".kibana\",\"_type\":\"#{type}\",\"_id\":\"#{id}\"}}\n"
      combined += "#{parsed_json.to_json}\n"
      log_status("#{data_file}")
    rescue StandardError => err
      # skip
      log_status("SKIP file (error in processing) '#{data_file}': #{err.message}", true)
      next
    end
  end
  combined
end

def process_bulk_query_result(result)
  # parse result
  begin
    result_json = JSON.parse(result)
  rescue StandardError => err
    $logger.warn("Failed to process result")
    return result # return the whole result as a fallback for failed result parsing
  end

  # check each result
  statuses_to_print = []
  result_json["items"].each do |item|
    item_result = item["delete"]
    is_delete_item = !item_result.nil?
    if !is_delete_item
      item_result = item["index"]
    end
    if item_result.nil?
      statuses_to_print << item
      next
    end

    begin
      item_status = item_result["status"]
    ensure
      # collect error statuses - those that
      # 1) >= 400 (except DELETEs with 404)
      # 2) undefined
      if !item_status.nil? and item_status.to_i >= 400 and !(item_status == 404 and is_delete_item) or item_status.nil?
        statuses_to_print << item
      end
    end
  end

  if statuses_to_print.empty? and result_json["errors"] != true
    status_str = "Success!"
  else
    status_str = "Failed with errors: " + statuses_to_print.to_json
  end

  status_str
end

log_status("======= Defaults to upload:")

upload_data = ""
<% p("kibana_objects.upload_patterns").each do |pattern| %>
upload_data += render_upsert_queries("<%= pattern.fetch("type") %>", "<%= pattern.fetch("pattern") %>")
<% end %>

$logger.info("Defaults data to upload:\n#{upload_data}")

## Upload generated objects

<%
  elasticsearch_addrs = nil
  respond_to?(:if_link) && if_link("elasticsearch") do |elasticsearch|
    elasticsearch_addrs = link('elasticsearch').instances.first.address
  end.else do
    elasticsearch_addrs = p("elasticsearch.host")
  end
%>
result = `curl http://<%= elasticsearch_addrs %>:<%= p('elasticsearch.port') %>/_bulk -d '#{upload_data.to_s}'`
log_status("=======")
$logger.info("======= Result of uploading defaults: #{result}")
puts("======= Result of uploading defaults: #{process_bulk_query_result(result)}")

###################################
# Upload specified Kibana objects #
###################################
log_status("--------------------------------------------------")
log_status("Upload Kibana objects from specified data files...")
log_status("--------------------------------------------------")

log_status("======= Files to upload:")
<% p("kibana_objects.upload_data_files").each do |object| %>
log_status("<%= object %>")
result = `cat <%= object %> | curl --data-binary @- http://<%= elasticsearch_addrs %>:<%= p('elasticsearch.port') %>/_bulk`
$logger.info("======= Result of uploading '<%= object %>': #{result}")
puts "======= Result of uploading '<%= object %>': #{process_bulk_query_result(result)}"
<% end %>
log_status("=======")
